#!/usr/bin/groovy
def label = "oracledb-exporter"

podTemplate(
    label: label, 
    containers: [
        containerTemplate(name: 'jnlp', image: 'jenkins/jnlp-slave:3.27-1-alpine', args: '${computer.jnlpmac} ${computer.name}', workingDir: '/home/jenkins', resourceRequestCpu: '200m', resourceLimitCpu: '300m', resourceRequestMemory: '256Mi', resourceLimitMemory: '512Mi'),
        containerTemplate(name: 'curl', image: 'benhall/curl:latest', workingDir: '/home/jenkins', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker:dind', workingDir: '/home/jenkins', privileged: true, ttyEnabled: true)
    ],
    imagePullSecrets: [ "crcreds" ] 
){

    node (label) {

        try {

            stage('Checkout') {
                ansiColor('xterm') {
                    println "Checkout the git repo"
                    checkout scm
                }
            }

            println "Loading Pipeline config"
            def inputFile = readFile('jenkins/config/jenkinsfile.json')
            config = new groovy.json.JsonSlurperClassic().parseText(inputFile)
            
            apply = false

            stage ("image build and push"){
                    buildDocker()
                }

        } catch(error) {
            currentBuild.result = "FAILED"
            throw error
        }
    }
}

def buildDocker() {
    def containerName="${config.oracledbExporter.containerName}"
    def containerVersion="${config.oracledbExporter.containerVersion}"
    def containerFullTag="$repo/$containerName:$containerVersion"
    def build_date = new Date().format("HH:mm:ss-dd/MM/yy")
    
    withCredentials([string(credentialsId: "${config.jfrogToken}", variable: 'jfrogToken')]){
        container('curl') {
            sh """
                curl -X GET -s -H "Authorization: Basic ${jfrogToken}" https://$repo/v2/${containerName}/manifests/${containerVersion} > container.json
            """
        }
    }
    def containerJson = readFile('container.json')
    def containerData = new groovy.json.JsonSlurperClassic().parseText(containerJson)
    if (containerData.errors != null) { // container does not exist
        container('docker'){
            docker.withRegistry('http://$repo/', 'jfrog-cr-creds') {
                def container = docker.build("$containerFullTag", "--build-arg BUILD_DATE=${build_date} \
                                                                    --build-arg VERSION=${containerVersion} \
                                                                    --build-arg EXPORTER_VERSION=\"${config.oracledbExporter.exporter_version}\" \
                                                                    -f ./docker/oracledb-exporter/Containerfile \
                                                                    ./docker/oracledb-exporter/", )
                container.push()
                container.push('latest')
            }
        }
    }
    else {
        println "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
        println "+ The Container image ${containerFullTag} already exists in container registry."
        println "+ A new container image won't be pushed again."
        println "+ Hint: You can bump the container version in config.common.app1.containerVersion to push a new image."
        println "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    }
}


