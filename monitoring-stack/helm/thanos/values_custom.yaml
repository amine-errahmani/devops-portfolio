global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""


kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
extraDeploy: []


image:
  registry: docker.io
  repository: bitnami/thanos
  tag: 0.28.0-scratch-r0
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []


objstoreConfig: ""
indexCacheConfig: ""
bucketCacheConfig: ""
existingObjstoreSecret: "thanos-objstore-config"
existingObjstoreSecretItems: []
httpConfig: ""
existingHttpConfigSecret: ""


https:
  enabled: false
  autoGenerated: false


auth:
  basicAuthUsers: {}


serviceAccount:
  create: false
  name: ""
  automountServiceAccountToken: true
  annotations: {}


query:
  enabled: true
  logLevel: info
  logFormat: logfmt
  replicaLabel: [replica]
  
  dnsDiscovery:
    enabled: true
    sidecarsService: monitoring-stack-thanos-discovery
    sidecarsNamespace: monitoring-stack
  
  stores:
    - "dnssrv+_grpc._tcp.monitoring-stack-kube-prom-thanos-discovery.monitoring-stack.svc.cluster.local"
    - "10.52.0.180:10901"
  
  sdConfig: ""
  existingSDConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  
  updateStrategy:
    type: RollingUpdate
  
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["NET_RAW"]
  
  resources:
    limits: {}
    requests: {}
  
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  
  startupProbe:
    enabled: false
  
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []

  grpc:
    server:
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
    client:
      serverName: ""
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
  
  service:
    type: ClusterIP
    ports:
      http: 9090
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false

  serviceGrpc:
    type: ClusterIP
    ports:
      grpc: 10901
    nodePorts:
      grpc: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false

  automountServiceAccountToken: true

  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: true
  
  rbac:
    create: false
  
  pspEnabled: false

  autoscaling:
    enabled: false
  
  pdb:
    create: false
  
  ingress:
    enabled: true
    hostname: monitorgw.infra.mon
    ingressClassName: ""
    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-app3e: "true"
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls:
    - secretName: thanos-gateway-tls
      hosts:
      - monitorgw.infra.mon
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
    grpc:
      enabled: false
      hostname: thanos-grpc.local
      ingressClassName: ""
      annotations: {}
      extraHosts: []
      extraTls: []
      secrets: []
      extraRules: []
      tls: false
      selfSigned: false
      apiVersion: ""
      path: /
      pathType: ImplementationSpecific


queryFrontend:
  enabled: true
  logLevel: info
  logFormat: logfmt
  config: ""
  existingConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  
  updateStrategy:
    type: RollingUpdate
  
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["NET_RAW"]

  resources:
    limits: {}
    requests: {}
  
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  
  startupProbe:
    enabled: false
  
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  
  service:
    type: ClusterIP
    ports:
      http: 9090
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    labels: {}
    extraPorts: []
    labelSelectorsOverride: {}
  
  automountServiceAccountToken: true
  
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: true
  
  rbac:
    create: false
  
  pspEnabled: false
  
  autoscaling:
    enabled: false
  
  pdb:
    create: false
  
  ingress:
    enabled: false


bucketweb:
  enabled: false


compactor:
  enabled: true
  logLevel: info
  logFormat: logfmt
  retentionResolutionRaw: 30d
  retentionResolution5m: 60d
  retentionResolution1h: 1y
  consistencyDelay: 30m
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []

  updateStrategy:
    type: Recreate
  
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["NET_RAW"]
  
  resources:
    limits: {}
    requests: {}
  
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  
  startupProbe:
    enabled: false

  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  
  service:
    type: ClusterIP
    ports:
      http: 9090
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
  
  automountServiceAccountToken: true
  
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: true
  
  ingress:
    enabled: false
  
  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    annotations: {}
    existingClaim: ""


storegateway:
  enabled: true
  logLevel: info
  logFormat: logfmt
  config: ""
  existingConfigmap: ""
  
  grpc:
    server:
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
  
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  
  updateStrategy:
    type: RollingUpdate
  
  podManagementPolicy: OrderedReady
  
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  
  resources:
    limits: {}
    requests: {}
  
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  
  startupProbe:
    enabled: false

  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  topologySpreadConstraints: []
  schedulerName: ""
  
  service:
    type: ClusterIP
    ports:
      http: 9090
      grpc: 10901
    nodePorts:
      http: ""
      grpc: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
  
  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    labels: {}
    annotations: {}
    existingClaim: ""
  
  automountServiceAccountToken: true
  
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: true
  
  autoscaling:
    enabled: false

  pdb:
    create: false

  ingress:
    enabled: false

  sharded:
    enabled: false


ruler:
  enabled: false


receive:
  enabled: false


receiveDistributor:
  enabled: false


metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: ""
    labels: {}
    jobLabel: ""
    interval: ""
    scrapeTimeout: ""
    metricRelabelings: []
    relabelings: []
    selector: {}

  prometheusRule:
    enabled: false


volumePermissions:
  enabled: false


minio:
  enabled: false


networkPolicy:
  enabled: false
