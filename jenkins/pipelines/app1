#!/usr/bin/groovy
def label = "app1"

podTemplate(
    label: label, 
    containers: [
        containerTemplate(name: 'jnlp', image: 'jenkins/jnlp-slave:3.27-1-alpine', args: '${computer.jnlpmac} ${computer.name}', workingDir: '/home/jenkins', resourceRequestCpu: '200m', resourceLimitCpu: '300m', resourceRequestMemory: '256Mi', resourceLimitMemory: '512Mi'),
        containerTemplate(name: 'curl', image: 'benhall/curl:latest', workingDir: '/home/jenkins', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'docker:dind', workingDir: '/home/jenkins', privileged: true, ttyEnabled: true),
        containerTemplate(name: 'helm-kube-vault', image: 'helm_kube_vault:v0.1', workingDir: '/home/jenkins', ttyEnabled: true, command: 'cat')
    ],
    imagePullSecrets: [ "crcreds" ] 
){

    node (label) {

        try {

            stage('Checkout') {
                ansiColor('xterm') {
                    println "Checkout the git repo"
                    checkout scm
                }
            }

            println "Loading Pipeline config"
            def inputFile = readFile('jenkins/config/jenkinsfile.json')
            config = new groovy.json.JsonSlurperClassic().parseText(inputFile)
            
            apply = false
            
            if (env.BRANCH_NAME == "develop" || env.BRANCH_NAME =~ "feature/*" || env.BRANCH_NAME =~ "SRE*" || env.BRANCH_NAME =~ "PR*" ) {
                def ENV = "dev"

                stage ("image build and push"){
                    buildDocker()
                }

                stage ('Deploy Containers') {
                    container('helm-kube-vault'){
                        withCredentials([string(credentialsId: "${config.vault_token_dev}", variable: 'vault_token')]){
                            vault_addr = "${config.vault_addr_dev}"
                            kubeconfig(credentialsId:'KubeConfigfile'){
                               helmDeploy(ENV) 
                            }
                        }                        
                    }
                }
            }

            if (env.BRANCH_NAME == "test" ) {
                def ENV = "test"
                
                stage ("image build and push"){
                    buildDocker()
                }

                stage ('Deploy Containers') {
                    container('helm-kube-vault'){
                        withCredentials([string(credentialsId: "${config.vault_token_dev}", variable: 'vault_token')]){
                            vault_addr = "${config.vault_addr_dev}"
                            kubeconfig(credentialsId:'KubeConfigfile'){
                               helmDeploy(ENV) 
                            }
                        }
                    }
                }
            }

            if (env.BRANCH_NAME == "main" ) {
                def ENV = "prd"

                stage ("image build and push"){
                    buildDocker()
                }

                stage ('Deploy Containers') {
                    container('helm-kube-vault'){
                        withCredentials([string(credentialsId: "${config.vault_token_shp}", variable: 'vault_token')]){
                            vault_addr = "${config.vault_addr_shp}"
                            kubeconfig(credentialsId:'prdKubeConfigFile'){
                               helmDeploy(ENV) 
                            }
                        }
                    }
                }
            }

        } catch(error) {
            currentBuild.result = "FAILED"
            throw error
        }
    }
}

def buildDocker() {
    def containerName="${config.common.app1.containerName}"
    def containerVersion="${config.common.app1.containerVersion}"
    def containerFullTag="custom.azurecr.io/$containerName:$containerVersion"
    def jar_url="${config.common.app1.containersUrl}${config.common.app1.app1_jar}"
    def build_date = new Date().format("HH:mm:ss-dd/MM/yy")
    
    withCredentials([string(credentialsId: "${config.jfrogToken}", variable: 'jfrogToken')]){
        container('curl') {
            sh """
                curl -X GET -s -H "Authorization: Basic ${jfrogToken}" https://custom.azurecr.io/v2/${containerName}/manifests/${containerVersion} > container.json
            """
        }
    }
    def containerJson = readFile('container.json')
    def containerData = new groovy.json.JsonSlurperClassic().parseText(containerJson)
    if (containerData.errors != null) { // container does not exist
        container('docker'){
            docker.withRegistry('http://custom.azurecr.io/', 'jfrog-cr-creds') {
                def container = docker.build("$containerFullTag", "--build-arg BUILD_DATE=${build_date} \
                                                                    --build-arg VERSION=${containerVersion} \
                                                                    --build-arg jar_url=${jar_url} \
                                                                    --build-arg blob_token=\"${config.blob_url_token}\" \
                                                                    --build-arg certs_url=${config.certs.certs_url} \
                                                                    --build-arg dev_root=${config.certs.dev_root} \
                                                                    --build-arg prod_root=${config.certs.prod_root} \
                                                                    ./docker/app1/", )
                container.push()
                container.push('latest')
            }
        }
    }
    else {
        println "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
        println "+ The Container image ${containerFullTag} already exists in container registry."
        println "+ A new container image won't be pushed again."
        println "+ Hint: You can bump the container version in config.common.app1.containerVersion to push a new image."
        println "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    }
}

def helmDeploy(ENV) {
    
    stage ('diff-upgrade') {
        ansiColor('xterm') {
            sh """
                chmod 600 .kube*

                export VAULT_TOKEN="${vault_token}"
                export VAULT_ADDR="${vault_addr}"
                export VAULT_SKIP_VERIFY=true
                export HELM_SECRETS_DRIVER=vault

                helm/app1/setup.sh diff-upgrade ${ENV}
            """ 
        }
    }

    script {
        ansiColor('xterm'){
            def plan_exitCode = sh(
            script: '''head -n 1 ./helm/app1/helm-diff-exitcode''',
            returnStdout: true
            ).trim()
            echo "Helm Diff Exit Code: ${plan_exitCode}"

            if ("${plan_exitCode}" == "0") {
                echo "No changes. Helm release is up-to-date!"
                currentBuild.result = 'SUCCESS'
            }
            if ("${plan_exitCode}" == "1") {
                throw "Helm diff has failed!"
                currentBuild.result = 'FAILURE'
            }
            if ("${plan_exitCode}" == "2") {
                echo "Changes have been noticed!"
                apply = true
            }
        }
    }

    if (apply == true) {
        stage ('Helm Chart Upgrade Approval') {
            userInput = input(
                id: 'runUpgrade', 
                message: 'would you like to upgrade?', 
                parameters: [ 
                    [
                        $class: 'BooleanParameterDefinition',
                        defaultValue: false,
                        description: 'Upgrade',
                        name: 'confirm Helm Chart upgrade'
                    ] 
                ]
            )
        }

        stage ('Upgrade') {
            if (userInput == true) {
                ansiColor('xterm') {
                    sh """
                        chmod 600 .kube*

                        export VAULT_TOKEN="${vault_token}"
                        export VAULT_ADDR="${vault_addr}"
                        export VAULT_SKIP_VERIFY=true
                        export HELM_SECRETS_DRIVER=vault

                        helm/app1/setup.sh upgrade ${ENV}
                    """
                }
            } else {
                error "Deployment aborted!!!"
            }    
        }
    }
}